"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[4091],{7735:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper","title":"generate_single_path_wrapper","description":"generatesinglepath_wrapper","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":7},"sidebar":"tutorialSidebar","previous":{"title":"generate_single_path","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path"},"next":{"title":"latlon_to_xy_meters","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters"}}');var r=s(4848),i=s(8453);const a={sidebar_postion:7},l=void 0,o={},d=[{value:"<code>generate_single_path_wrapper</code>",id:"generate_single_path_wrapper",level:2},{value:"Function Signature",id:"function-signature",level:3},{value:"Seed Initialization for Reproducibility",id:"seed-initialization-for-reproducibility",level:3},{value:"Argument Unpacking",id:"argument-unpacking",level:3},{value:"Path Generation Call",id:"path-generation-call",level:3},{value:"Example Use Case",id:"example-use-case",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"generate_single_path_wrapper",children:(0,r.jsx)(n.code,{children:"generate_single_path_wrapper"})}),"\n",(0,r.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def generate_single_path_wrapper(args):\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Accepts a ",(0,r.jsx)(n.strong,{children:"single argument"}),", usually a tuple of parameters."]}),"\n",(0,r.jsxs)(n.li,{children:["This format makes it compatible with ",(0,r.jsx)(n.code,{children:"multiprocessing.Pool.map"})," or similar parallel tools."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"seed-initialization-for-reproducibility",children:"Seed Initialization for Reproducibility"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"np.random.seed(os.getpid() + int(time.time()*1000) % 10000)\nrandom.seed(os.getpid() + int(time.time()*1000) % 10000)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Why it's here:"})," When running in parallel, we want each process to produce ",(0,r.jsx)(n.strong,{children:"different random results"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"os.getpid()"})," ensures each process has a unique base."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"int(time.time()*1000) % 10000"})," adds ",(0,r.jsx)(n.strong,{children:"millisecond-level randomness"})," to avoid duplicate seeds when many workers start close together in time."]}),"\n",(0,r.jsxs)(n.li,{children:["Both NumPy and Python\u2019s ",(0,r.jsx)(n.code,{children:"random"})," module are seeded separately to ensure all random calls are diversified."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f Without these seeds, different workers might generate ",(0,r.jsx)(n.strong,{children:"identical paths"})," if they happen to start at the same moment."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"argument-unpacking",children:"Argument Unpacking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"center, mz_radius, tortuosity, speed = args\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The input ",(0,r.jsx)(n.code,{children:"args"})," is expected to be a tuple like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"(center_point, radius, tortuosity_value, speed_setting)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"path-generation-call",children:"Path Generation Call"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"return generate_single_path(center, mz_radius, tortuosity, speed)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Delegates the actual path computation to ",(0,r.jsx)(n.code,{children:"generate_single_path"})," function."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-use-case",children:"Example Use Case"}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s how this would be used in a multiprocessing context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from multiprocessing import Pool\n\nparam_list = [\n    (center_point, 300, 0.2, "default"),\n    (center_point, 300, 0.5, "low"),\n    (center_point, 300, 0.9, "high"),\n    # ...\n]\n\nwith Pool(processes=4) as pool:\n    results = pool.map(generate_single_path_wrapper, param_list)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Each worker gets its own parameters, seeds its RNG, and generates a unique path."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"RNG seeding"}),(0,r.jsx)(n.td,{children:"Ensures randomness per process/thread"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Tuple input"}),(0,r.jsxs)(n.td,{children:["Enables easy use with ",(0,r.jsx)(n.code,{children:"map"})," or ",(0,r.jsx)(n.code,{children:"starmap"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Clean delegation"}),(0,r.jsxs)(n.td,{children:["Simply wraps and calls ",(0,r.jsx)(n.code,{children:"generate_single_path"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Parallel-safe"}),(0,r.jsx)(n.td,{children:"Safe for multiprocessing due to PID-based seeding"})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);