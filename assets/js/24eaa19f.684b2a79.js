"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[9856],{539:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Repositories/PRISM/FastAPI/smooth_speed","title":"SmoothSpeed","description":"The SmoothSpeed class is used to generate smooth, randomized drone speed values over time, simulating natural acceleration, deceleration, and cruising behavior. It uses a precomputed sine-based speed curve to provide realistic motion patterns while avoiding speeds that are too low.","source":"@site/docs/Repositories/PRISM/FastAPI/smooth_speed.md","sourceDirName":"Repositories/PRISM/FastAPI","slug":"/Repositories/PRISM/FastAPI/smooth_speed","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/smooth_speed","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/smooth_speed.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Main","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/main"},"next":{"title":"sample_point_within_polygon","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon"}}');var i=s(4848),r=s(8453);const d={sidebar_position:3},a="SmoothSpeed",l={},o=[{value:"Code Summary",id:"code-summary",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Example",id:"example",level:4},{value:"<code>get_next_speed()</code>",id:"get_next_speed",level:2},{value:"Acceleration From Zero",id:"acceleration-from-zero",level:3},{value:"Random Fluctuation Logic",id:"random-fluctuation-logic",level:3},{value:"Clamp and Filter Unsafe Speeds",id:"clamp-and-filter-unsafe-speeds",level:3},{value:"Final Result",id:"final-result",level:3},{value:"Full Example Usage",id:"full-example-usage",level:2},{value:"Key Design Goals",id:"key-design-goals",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"smoothspeed",children:"SmoothSpeed"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"SmoothSpeed"})," class is used to generate ",(0,i.jsx)(n.strong,{children:"smooth, randomized drone speed values"})," over time, simulating natural acceleration, deceleration, and cruising behavior. It uses a ",(0,i.jsx)(n.strong,{children:"precomputed sine-based speed curve"})," to provide realistic motion patterns while avoiding speeds that are too low."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"code-summary",children:"Code Summary"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class SmoothSpeed:\n    LOW_SPEED_THRESHOLD = 1.0\n    ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This class wraps a mechanism to fetch a new speed value at each step. It respects a defined minimum speed threshold (",(0,i.jsx)(n.code,{children:"LOW_SPEED_THRESHOLD = 1.0"})," m/s) to avoid speeds that are too slow for drone navigation."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(self, initial_speed, start_at_zero=False):\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"initial_speed"}),": The intended cruising speed (in m/s), used to scale the curve."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"start_at_zero"}),": If ",(0,i.jsx)(n.code,{children:"True"}),", the drone starts at 0 m/s and ramps up gradually to cruising speed."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsx)(n.p,{children:"This block initializes a sine-based curve of speeds:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"self.speed_curve = np.round(self.initial_speed * np.sin(np.linspace(0, np.pi/2, 100)), 1)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"np.linspace(0, \u03c0/2, 100)"})," creates 100 points from 0 to 90 degrees."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"np.sin(...)"})," produces a smooth curve from 0 to 1."]}),"\n",(0,i.jsxs)(n.li,{children:["Multiplying by ",(0,i.jsx)(n.code,{children:"initial_speed"})," creates a smooth ramp-up curve from 0 to ",(0,i.jsx)(n.code,{children:"initial_speed"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Rounded to one decimal place for stability."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"smooth = SmoothSpeed(initial_speed=32, start_at_zero=True)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"start_at_zero=True"}),", speed starts from 0 and accelerates along the sine curve. Otherwise, it starts near the target speed."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"get_next_speed",children:(0,i.jsx)(n.code,{children:"get_next_speed()"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_next_speed(self):\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the ",(0,i.jsx)(n.strong,{children:"next speed value"}),", based on randomness and the speed curve. This simulates ",(0,i.jsx)(n.strong,{children:"natural variation in drone velocity"}),", with logic to avoid unrealistic behaviors."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"acceleration-from-zero",children:"Acceleration From Zero"}),"\n",(0,i.jsxs)(n.p,{children:["If the drone is starting from zero (i.e., ",(0,i.jsx)(n.code,{children:"start_at_zero=True"}),") and hasn't reached 90% of target speed yet:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if self.start_at_zero and self.speed_curve[self.current_index] <= self.initial_speed * 0.9:\n    updated_index = min(self.current_index + np.random.randint(1, 5), len(self.speed_curve) - 1)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Randomly increase the speed index by 1\u20134."}),"\n",(0,i.jsxs)(n.li,{children:["Once the drone reaches 90% of the cruising speed, it disables ",(0,i.jsx)(n.code,{children:"start_at_zero"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This ensures ",(0,i.jsx)(n.strong,{children:"fast but smooth ramp-up from zero"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"random-fluctuation-logic",children:"Random Fluctuation Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"chance = np.random.random()\n\nif chance < 0.33:\n    updated_index += np.random.randint(1, 5)\nelif chance < 0.66:\n    updated_index -= np.random.randint(1, 5)\n# else: maintain current index\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each time step:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["33% chance to ",(0,i.jsx)(n.strong,{children:"speed up"})]}),"\n",(0,i.jsxs)(n.li,{children:["33% chance to ",(0,i.jsx)(n.strong,{children:"slow down"})]}),"\n",(0,i.jsxs)(n.li,{children:["34% chance to ",(0,i.jsx)(n.strong,{children:"keep current speed"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This creates ",(0,i.jsx)(n.strong,{children:"organic variation"})," in the speed."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"clamp-and-filter-unsafe-speeds",children:"Clamp and Filter Unsafe Speeds"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"updated_index = max(0, min(len(self.speed_curve) - 1, updated_index))\nnext_speed = self.speed_curve[updated_index]\n"})}),"\n",(0,i.jsx)(n.p,{children:"This ensures the index stays within the valid range of the curve."}),"\n",(0,i.jsxs)(n.p,{children:["Then, the class rejects speeds below ",(0,i.jsx)(n.code,{children:"LOW_SPEED_THRESHOLD"})," with 90% probability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if next_speed < self.LOW_SPEED_THRESHOLD:\n    if np.random.random() > 0.1:\n        ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the randomly chosen speed is too low, it adjusts the index toward the curve\u2019s center to recover to a safer speed range."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"final-result",children:"Final Result"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"self.current_index = updated_index\nreturn next_speed\n"})}),"\n",(0,i.jsx)(n.p,{children:"The class updates its internal state and returns the selected speed value."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"full-example-usage",children:"Full Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import numpy as np\nimport matplotlib.pyplot as plt\nfrom smooth_speed import SmoothSpeed\n\ninitial_speed = np.random.randint(30, 35)\nsmooth_speed = SmoothSpeed(initial_speed=initial_speed, start_at_zero=True)\n\nspeeds = []\nfor _ in range(200):\n    speeds.append(smooth_speed.get_next_speed())\n\nplt.plot(speeds, label="Speed over time")\nplt.axhline(initial_speed, color="gray", linestyle="--", label="Initial speed")\nplt.legend()\nplt.title("Smooth Speed Profile")\nplt.xlabel("Time Step")\nplt.ylabel("Speed (m/s)")\nplt.grid(True)\nplt.show()\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This generates a ",(0,i.jsx)(n.strong,{children:"visually smooth speed profile"})," that rises quickly from zero and fluctuates gently near the target speed. It's ideal for drone simulations where ",(0,i.jsx)(n.strong,{children:"abrupt changes or unrealistic speeds are undesirable"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-design-goals",children:"Key Design Goals"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Smoothness"}),(0,i.jsx)(n.td,{children:"Uses a sine curve to simulate gentle acceleration and deceleration"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Controlled randomness"}),(0,i.jsx)(n.td,{children:"Varies speed with randomness, but avoids sudden large changes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Start from zero"}),(0,i.jsx)(n.td,{children:"Optional behavior to simulate drone takeoff"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Safe speed enforcement"}),(0,i.jsx)(n.td,{children:"Prevents drones from operating below a reasonable threshold (1 m/s)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Reusable"}),(0,i.jsx)(n.td,{children:"Can be sampled repeatedly for time-step-based simulations"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);