"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[3385],{8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(6540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},9857:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Repositories/PRISM/Components/results-charts","title":"results-charts","description":"The results-charts component visualizes simulation processing times using line charts. It shows both total and per-drone processing times over simulation ticks.","source":"@site/docs/Repositories/PRISM/Components/results-charts.md","sourceDirName":"Repositories/PRISM/Components","slug":"/Repositories/PRISM/Components/results-charts","permalink":"/devdocs/docs/Repositories/PRISM/Components/results-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/Components/results-charts.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"title":"results-charts","sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"results-table","permalink":"/devdocs/docs/Repositories/PRISM/Components/results-table"},"next":{"title":"results-drone-path","permalink":"/devdocs/docs/Repositories/PRISM/Components/results-drone-path"}}');var r=n(4848),i=n(8453);const o={title:"results-charts",sidebar_position:15},a="results-charts",l={},c=[{value:"Summary",id:"summary",level:2},{value:"Props",id:"props",level:2},{value:"Main Logic",id:"main-logic",level:2},{value:"Example: Rendering a Line Chart",id:"example-rendering-a-line-chart",level:2},{value:"Where to Make Changes",id:"where-to-make-changes",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"results-charts",children:"results-charts"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"results-charts"})," component visualizes simulation processing times using line charts. It shows both total and per-drone processing times over simulation ticks."]}),"\n",(0,r.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Renders line charts for total and per-drone processing times."}),"\n",(0,r.jsx)(s.li,{children:"Uses Recharts for visualization."}),"\n",(0,r.jsx)(s.li,{children:"Maps drone IDs to labels for clarity."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://ik.imagekit.io/devdocs/img/prism/processing_time_graph.png",alt:"Total processing time"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://ik.imagekit.io/devdocs/img/prism/per_drone_processing_time.png",alt:"Per drone processing time"})}),"\n",(0,r.jsx)(s.h2,{id:"props",children:"Props"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"export const ResultsCharts = ({ tickLog, drones }: { tickLog: TickLogEntry[]; drones: { id: string; label: string }[] })\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tickLog"}),": Array of tick log entries from the simulation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"drones"}),": Array of drone objects with id and label"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"main-logic",children:"Main Logic"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Prepares data for total and per-drone charts."}),"\n",(0,r.jsx)(s.li,{children:"Renders two line charts using Recharts."}),"\n",(0,r.jsx)(s.li,{children:"Assigns unique colors to each drone line."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"example-rendering-a-line-chart",children:"Example: Rendering a Line Chart"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:'<LineChart width={1200} height={500} data={totalProcessingData}>\n  <Line\n    type="monotone"\n    dataKey="totalProcessingTime"\n    stroke="#8884d8"\n    dot={false}\n  />\n</LineChart>\n'})}),"\n",(0,r.jsx)(s.h2,{id:"where-to-make-changes",children:"Where to Make Changes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Chart type"}),": Add new charts or change chart types."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data mapping"}),": Update how data is prepared for visualization."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["For further customization, see the code comments in ",(0,r.jsx)(s.code,{children:"src/components/results-charts.tsx"})," and related context files."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);