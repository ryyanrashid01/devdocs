"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[4457],{1183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Repositories/PRISM/Components/drone-context","title":"drone-context","description":"The drone-context component is the global state manager for the simulation. It provides all simulation data and update functions to the rest of the app via React Context.","source":"@site/docs/Repositories/PRISM/Components/drone-context.md","sourceDirName":"Repositories/PRISM/Components","slug":"/Repositories/PRISM/Components/drone-context","permalink":"/devdocs/docs/Repositories/PRISM/Components/drone-context","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/Components/drone-context.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"drone-context","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"drone-form","permalink":"/devdocs/docs/Repositories/PRISM/Components/drone-form"},"next":{"title":"drone-list","permalink":"/devdocs/docs/Repositories/PRISM/Components/drone-list"}}');var i=t(4848),s=t(8453);const r={title:"drone-context",sidebar_position:3},l="drone-context",a={},d=[{value:"High-Level Summary",id:"high-level-summary",level:2},{value:"Context Structure Diagram",id:"context-structure-diagram",level:2},{value:"Context Values &amp; Types",id:"context-values--types",level:2},{value:"State Management Walkthrough",id:"state-management-walkthrough",level:2},{value:"Extension Points",id:"extension-points",level:2},{value:"Related Files",id:"related-files",level:2},{value:"Screenshots &amp; Diagrams",id:"screenshots--diagrams",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"drone-context",children:"drone-context"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"drone-context"})," component is the ",(0,i.jsx)(n.strong,{children:"global state manager"})," for the simulation. It provides all simulation data and update functions to the rest of the app via React Context."]}),"\n",(0,i.jsx)(n.h2,{id:"high-level-summary",children:"High-Level Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exposes all simulation state and update functions via context."}),"\n",(0,i.jsx)(n.li,{children:"Used by nearly every component to read or update simulation data."}),"\n",(0,i.jsx)(n.li,{children:"Handles simulation lifecycle (start, stop, finish, reset), drone management, and tick logging."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"context-structure-diagram",children:"Context Structure Diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:"graph TD;\n  DroneProvider --\x3e|provides| DroneContext\n  DroneContext --\x3e|useContext| Components\n  DroneProvider --\x3e Drones\n  DroneProvider --\x3e Config\n  DroneProvider --\x3e MonitoringZone\n  DroneProvider --\x3e isSimulationRunning\n  DroneProvider --\x3e Initialized\n  DroneProvider --\x3e Paths\n  DroneProvider --\x3e TimeParameters\n  DroneProvider --\x3e TickLogRef\n"})}),"\n",(0,i.jsx)(n.h2,{id:"context-values--types",children:"Context Values & Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface DroneContextType {\n  drones: Drone[];\n  config: SimulationConfig;\n  monitoringZone: MonitoringZone | null;\n  isSimulationRunning: 'stopped' | 'running' | 'finished';\n  initialized: boolean;\n  setInitialized: (v: boolean) => void;\n  addMultipleDrones: (...);\n  updateDrone: (...);\n  removeDrone: (...);\n  updateDroneConfig: (...);\n  updateMzConfig: (...);\n  setMonitoringZone: (...);\n  startSimulation: () => void;\n  stopSimulation: () => void;\n  finishSimulation: () => void;\n  resetSimulation: () => void;\n  applyDronePreset: (...);\n  applyZonePreset: (...);\n  drawnItemsRef: ...;\n  animationRef: ...;\n  paths: Path[][];\n  setPaths: (...);\n  timeParameters: TimeParameters;\n  setTimeParameters: (...);\n  tickLogRef: React.MutableRefObject<TickLogEntry[]>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"state-management-walkthrough",children:"State Management Walkthrough"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Drone Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add, update, or remove drones using context functions."}),"\n",(0,i.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'const { addMultipleDrones, updateDrone, removeDrone } = useDroneContext();\naddMultipleDrones(3, "default", [0.5, 0.5, 0.5]);\nupdateDrone(droneId, { label: "New Name" });\nremoveDrone(droneId);\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simulation Lifecycle"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start, stop, finish, or reset the simulation."}),"\n",(0,i.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"startSimulation();\nstopSimulation();\nfinishSimulation();\nresetSimulation();\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration Updates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update drone or monitoring zone config."}),"\n",(0,i.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'updateDroneConfig({ flightViolation: ["TFLV01"] });\nupdateMzConfig({ weather: "rainy" });\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tick Logging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All tick logs are stored in ",(0,i.jsx)(n.code,{children:"tickLogRef"})," for analytics and results."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add new state"}),": Extend the context type and provider state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add new update functions"}),": Add new methods to the context for new features."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom analytics"}),": Store new logs or metrics in ",(0,i.jsx)(n.code,{children:"tickLogRef"})," or new refs."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-files",children:"Related Files"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./drone-canvas",children:(0,i.jsx)(n.code,{children:"drone-canvas.tsx"})}),": Uses context for simulation logic."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../presets",children:(0,i.jsx)(n.code,{children:"lib/presets.ts"})}),": Provides default configs and presets."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"screenshots--diagrams",children:"Screenshots & Diagrams"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://ik.imagekit.io/devdocs/img/prism/drone_context_flowchart.png",alt:"Drone context flowchart"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["For further customization, see the code comments in ",(0,i.jsx)(n.code,{children:"src/components/drone-context.tsx"})," and related context files."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);