"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[8359],{264:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Deploying to Virtual Machine/Reverse Proxy with Nginx","title":"Reverse Proxy with Nginx","description":"This guide explains how to configure Nginx as a reverse proxy for a website or web application running on a virtual machine. A reverse proxy forwards incoming requests from your domain (like example.com) to an internal web server (e.g., a Django or Node app running on localhost:8000).","source":"@site/docs/Deploying to Virtual Machine/Reverse Proxy with Nginx.md","sourceDirName":"Deploying to Virtual Machine","slug":"/Deploying to Virtual Machine/Reverse Proxy with Nginx","permalink":"/devdocs/docs/Deploying to Virtual Machine/Reverse Proxy with Nginx","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Deploying to Virtual Machine/Reverse Proxy with Nginx.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"GitHub Deploy Keys","permalink":"/devdocs/docs/Deploying to Virtual Machine/GitHub Deploy Keys"},"next":{"title":"HTTPS with Certbot","permalink":"/devdocs/docs/Deploying to Virtual Machine/HTTPS with Certbot"}}');var i=r(4848),o=r(8453);const t={sidebar_position:3},a=void 0,l={},d=[{value:"Why Use a Reverse Proxy?",id:"why-use-a-reverse-proxy",level:2},{value:"Step 1: Install Nginx",id:"step-1-install-nginx",level:2},{value:"Step 2: Create a Domain Config File",id:"step-2-create-a-domain-config-file",level:2},{value:"Explanation",id:"explanation",level:3},{value:"Step 3: Enable the Site and Reload Nginx",id:"step-3-enable-the-site-and-reload-nginx",level:2},{value:"Step 4: Start Your App on the Correct Port",id:"step-4-start-your-app-on-the-correct-port",level:2},{value:"Step 5: Serving Static Files or APIs",id:"step-5-serving-static-files-or-apis",level:2},{value:"Example: Serving API and Frontend Separately",id:"example-serving-api-and-frontend-separately",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This guide explains how to configure ",(0,i.jsx)(n.strong,{children:"Nginx as a reverse proxy"})," for a website or web application running on a virtual machine. A reverse proxy forwards incoming requests from your domain (like ",(0,i.jsx)(n.code,{children:"example.com"}),") to an internal web server (e.g., a Django or Node app running on ",(0,i.jsx)(n.code,{children:"localhost:8000"}),")."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-use-a-reverse-proxy",children:"Why Use a Reverse Proxy?"}),"\n",(0,i.jsx)(n.p,{children:"A reverse proxy sits between users and your app server. It lets you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Point a domain to your internal service (e.g. Python ",(0,i.jsx)(n.code,{children:"manage.py runserver"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Improve security by keeping your app behind Nginx"}),"\n",(0,i.jsx)(n.li,{children:"Control routing and handle static files or APIs more easily"}),"\n",(0,i.jsx)(n.li,{children:"Add SSL with Certbot (see HTTPS setup guide)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-1-install-nginx",children:"Step 1: Install Nginx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install nginx -y\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check Nginx is running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl status nginx\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You should see ",(0,i.jsx)(n.code,{children:"active (running)"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-2-create-a-domain-config-file",children:"Step 2: Create a Domain Config File"}),"\n",(0,i.jsxs)(n.p,{children:["Nginx keeps site configs in ",(0,i.jsx)(n.code,{children:"/etc/nginx/sites-available/"}),". Create a config for your domain:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/nginx/sites-available/example.com\n"})}),"\n",(0,i.jsx)(n.p,{children:"Paste this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Port ",(0,i.jsx)(n.code,{children:"8000"})," is just a common default used by development servers like Django. You can use any available port, such as ",(0,i.jsx)(n.code,{children:"3000"})," or ",(0,i.jsx)(n.code,{children:"5000"}),", as long as your application is listening on it and your ",(0,i.jsx)(n.code,{children:"proxy_pass"})," in the Nginx config matches the same port."]})}),"\n",(0,i.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"listen 80"}),": Accept HTTP requests on port 80"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"server_name"}),": Matches your domain"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy_pass"}),": Forwards traffic to your app running locally"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy_set_header"}),": Passes useful metadata (host, IP, scheme) to your app"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-3-enable-the-site-and-reload-nginx",children:"Step 3: Enable the Site and Reload Nginx"}),"\n",(0,i.jsxs)(n.p,{children:["Create a symbolic link to ",(0,i.jsx)(n.code,{children:"sites-enabled/"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["This command creates a symbolic link (like a shortcut) from your site config file in ",(0,i.jsx)(n.code,{children:"sites-available/"})," to ",(0,i.jsx)(n.code,{children:"sites-enabled/"}),". The ",(0,i.jsx)(n.code,{children:"sites-available/"})," directory holds all site configurations, while ",(0,i.jsx)(n.code,{children:"sites-enabled/"})," contains only the ones that Nginx will actually use. Linking the file tells Nginx to enable this site."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n"})}),"\n",(0,i.jsx)(n.p,{children:"Test the config:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo nginx -t\n"})}),"\n",(0,i.jsx)(n.p,{children:"If no errors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart nginx\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-4-start-your-app-on-the-correct-port",children:"Step 4: Start Your App on the Correct Port"}),"\n",(0,i.jsxs)(n.p,{children:["Make sure your app is running and listening on ",(0,i.jsx)(n.code,{children:"127.0.0.1:8000"})," (or another port you choose). For example, if you\u2019re using Django, the default development server runs on port 8000."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /path/to/your/app\nsource .venv/bin/activate\npython manage.py runserver\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["If you are using any other framework, run the server on the appropriate port for that framework, and make sure to update your Nginx ",(0,i.jsx)(n.code,{children:"proxy_pass"})," configuration accordingly."]})}),"\n",(0,i.jsx)(n.p,{children:"Once your app is running, visit:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://example.com\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you see a ",(0,i.jsx)(n.code,{children:"502 Bad Gateway"})," error, it usually means your app is not running or not listening on the correct port."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-5-serving-static-files-or-apis",children:"Step 5: Serving Static Files or APIs"}),"\n",(0,i.jsx)(n.p,{children:"You can customize the Nginx config further for static files, APIs, or separate frontend/backend apps."}),"\n",(0,i.jsx)(n.h3,{id:"example-serving-api-and-frontend-separately",children:"Example: Serving API and Frontend Separately"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    server_name example.com;\n\n    location /api/ {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location / {\n        root /var/www/html;\n        index index.html;\n        try_files $uri $uri/ =404;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Requests to ",(0,i.jsx)(n.code,{children:"/api/"})," go to your backend (e.g. Django, Node)"]}),"\n",(0,i.jsxs)(n.li,{children:["Other requests (like ",(0,i.jsx)(n.code,{children:"/about"}),") load static HTML from ",(0,i.jsx)(n.code,{children:"/var/www/html"})]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["If you're running a backend server like Django or Node.js that serves both frontend and backend (e.g., templates and APIs together), you might not need a separate ",(0,i.jsx)(n.code,{children:"/api/"})," route."]}),(0,i.jsxs)(n.p,{children:["However, if you're using a ",(0,i.jsx)(n.strong,{children:"frontend framework"})," like React or Vue (served from ",(0,i.jsx)(n.code,{children:"/"}),"), and it calls your ",(0,i.jsx)(n.strong,{children:"backend API"})," via ",(0,i.jsx)(n.code,{children:"/api/"}),", then this separation is important. It allows Nginx to route frontend requests to static files and API requests to your server app."]}),(0,i.jsxs)(n.p,{children:["This is necessary because in that setup, it's the ",(0,i.jsx)(n.strong,{children:"browser"})," (not the server) making requests to ",(0,i.jsx)(n.code,{children:"/api/"}),", so Nginx needs to know where to forward them."]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If you see ",(0,i.jsx)(n.code,{children:"502 Bad Gateway"}),", your app is probably not running or listening on the wrong port."]}),"\n",(0,i.jsxs)(n.li,{children:["Make sure your app binds specifically to ",(0,i.jsx)(n.code,{children:"127.0.0.1"})," (the loopback IP address), not just ",(0,i.jsx)(n.code,{children:"localhost"}),", and listens on port ",(0,i.jsx)(n.code,{children:"8000"})," or whatever port your app is running on."]}),"\n",(0,i.jsxs)(n.li,{children:["Always run ",(0,i.jsx)(n.code,{children:"sudo nginx -t"})," after making config changes."]}),"\n",(0,i.jsx)(n.li,{children:"Check Nginx logs:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo tail -f /var/log/nginx/error.log\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);