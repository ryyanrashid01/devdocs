"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[2872],{6842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy","title":"paths_to_numpy","description":"This function takes a list of drone flight paths in geographic coordinates (latitude, longitude) with timestamps and converts each path into a NumPy array with planar Cartesian coordinates (meters) relative to a reference center, plus the time component.","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":9},"sidebar":"tutorialSidebar","previous":{"title":"latlon_to_xy_meters","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters"},"next":{"title":"plot_drone_paths_image Function","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image"}}');var r=n(4848),i=n(8453);const a={sidebar_postion:9},l="paths_to_numpy",o={},c=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Step 1: Initialize the output list",id:"step-1-initialize-the-output-list",level:3},{value:"Step 2: Iterate over each path tuple",id:"step-2-iterate-over-each-path-tuple",level:3},{value:"Step 3: For each point, convert lat/lon to x/y meters and collect timestamp",id:"step-3-for-each-point-convert-latlon-to-xy-meters-and-collect-timestamp",level:3},{value:"Step 4: Stack x, y, t columns into a NumPy array",id:"step-4-stack-x-y-t-columns-into-a-numpy-array",level:3},{value:"Step 5: Return the list of NumPy arrays",id:"step-5-return-the-list-of-numpy-arrays",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"paths_to_numpy",children:(0,r.jsx)(t.code,{children:"paths_to_numpy"})})}),"\n",(0,r.jsx)(t.p,{children:"This function takes a list of drone flight paths in geographic coordinates (latitude, longitude) with timestamps and converts each path into a NumPy array with planar Cartesian coordinates (meters) relative to a reference center, plus the time component."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"def paths_to_numpy(paths, center_lat, center_lon):\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"paths"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"list"})}),(0,r.jsxs)(t.td,{children:["List of paths, where each path is a tuple whose first element is a list of points in the format ",(0,r.jsx)(t.code,{children:"((lat, lon), t, speed)"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"center_lat"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"float"})}),(0,r.jsx)(t.td,{children:"Latitude of the reference center point in degrees."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"center_lon"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"float"})}),(0,r.jsx)(t.td,{children:"Longitude of the reference center point in degrees."})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"A list of NumPy arrays, one per path."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Each NumPy array has shape ",(0,r.jsx)(t.code,{children:"(N, 3)"})," where N is the number of points, and columns correspond to:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"x"}),": East-West distance from center in meters."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"y"}),": North-South distance from center in meters."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"t"}),": Timestamp in seconds (or other time units)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)(t.h3,{id:"step-1-initialize-the-output-list",children:"Step 1: Initialize the output list"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"np_paths = []\n"})}),"\n",(0,r.jsx)(t.p,{children:"An empty list to hold the converted NumPy arrays."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"step-2-iterate-over-each-path-tuple",children:"Step 2: Iterate over each path tuple"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"for path_tuple in paths:\n    path = path_tuple[0]  # Extract inner list of points\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Each item in ",(0,r.jsx)(t.code,{children:"paths"})," is a tuple, where the actual path points list is the first element."]}),"\n",(0,r.jsx)(t.li,{children:"Extract this list of points."}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"step-3-for-each-point-convert-latlon-to-xy-meters-and-collect-timestamp",children:"Step 3: For each point, convert lat/lon to x/y meters and collect timestamp"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"xs, ys, ts = [], [], []\nfor point in path:\n    coords, t, _ = point\n    lat, lon = coords\n    x, y = latlon_to_xy_meters(center_lat, center_lon, lat, lon)\n    xs.append(x)\n    ys.append(y)\n    ts.append(t)\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Each point is a tuple: ",(0,r.jsx)(t.code,{children:"((lat, lon), time, speed)"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Extract latitude and longitude."}),"\n",(0,r.jsxs)(t.li,{children:["Convert lat/lon to local Cartesian coordinates relative to the center using ",(0,r.jsx)(t.code,{children:"latlon_to_xy_meters"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Append the converted x, y and timestamp values to separate lists."}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"step-4-stack-x-y-t-columns-into-a-numpy-array",children:"Step 4: Stack x, y, t columns into a NumPy array"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"np_paths.append(np.column_stack((xs, ys, ts)))\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Combine the lists of x, y, and t values into a single 2D NumPy array with shape ",(0,r.jsx)(t.code,{children:"(N, 3)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"step-5-return-the-list-of-numpy-arrays",children:"Step 5: Return the list of NumPy arrays"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"return np_paths\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"center_lat, center_lon = 25.276987, 55.296249\n\npaths = [\n    (\n        [((25.28, 55.30), 0.0, 20), ((25.281, 55.301), 0.2, 21)],\n    ),\n    (\n        [((25.279, 55.299), 0.0, 18), ((25.28, 55.3), 0.2, 19)],\n    ),\n]\n\nnp_paths = paths_to_numpy(paths, center_lat, center_lon)\n\nfor arr in np_paths:\n    print(arr)\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Sample Output:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"[[416.0  467.0  0.0]\n [529.0  579.0  0.2]]\n[[300.0  350.0  0.0]\n [416.0  467.0  0.2]]\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Converts geographic paths into metric Cartesian coordinates plus time."}),"\n",(0,r.jsx)(t.li,{children:"Prepares data for numerical operations, plotting, or simulations."}),"\n",(0,r.jsxs)(t.li,{children:["Uses the ",(0,r.jsx)(t.code,{children:"latlon_to_xy_meters"})," helper for spatial conversion."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);