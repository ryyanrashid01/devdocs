"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[187],{8453:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>l});var s=e(6540);const o={},i=s.createContext(o);function r(n){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function l(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),s.createElement(i.Provider,{value:t},n.children)}},9534:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Repositories/PRISM/Components/sim-controls","title":"sim-controls","description":"The sim-controls component provides the main controls for starting, stopping, and resetting the simulation. It also shows the simulation running status.","source":"@site/docs/Repositories/PRISM/Components/sim-controls.md","sourceDirName":"Repositories/PRISM/Components","slug":"/Repositories/PRISM/Components/sim-controls","permalink":"/devdocs/docs/Repositories/PRISM/Components/sim-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/Components/sim-controls.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"sim-controls","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"config-sidebar","permalink":"/devdocs/docs/Repositories/PRISM/Components/config-sidebar"},"next":{"title":"sim-form","permalink":"/devdocs/docs/Repositories/PRISM/Components/sim-form"}}');var o=e(4848),i=e(8453);const r={title:"sim-controls",sidebar_position:9},l="sim-controls",a={},c=[{value:"Summary",id:"summary",level:2},{value:"Props",id:"props",level:2},{value:"Main Logic",id:"main-logic",level:2},{value:"Example: Control Buttons",id:"example-control-buttons",level:2},{value:"Where to Make Changes",id:"where-to-make-changes",level:2}];function d(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"sim-controls",children:"sim-controls"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"sim-controls"})," component provides the main controls for starting, stopping, and resetting the simulation. It also shows the simulation running status."]}),"\n",(0,o.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Provides buttons to start, stop, reset, and view results."}),"\n",(0,o.jsx)(t.li,{children:"Shows simulation running status and feedback."}),"\n",(0,o.jsx)(t.li,{children:"Integrates with the simulation context for state management."}),"\n"]}),"\n",(0,o.jsx)("img",{src:"https://ik.imagekit.io/devdocs/img/prism/sim_controls.png",alt:"sim-controls",width:"300"}),"\n",(0,o.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(t.p,{children:"This component does not take explicit props; it uses the drone context for state."}),"\n",(0,o.jsx)(t.h2,{id:"main-logic",children:"Main Logic"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Shows different buttons based on simulation state (stopped, running, finished)."}),"\n",(0,o.jsx)(t.li,{children:"Disables start if no drones or not initialized."}),"\n",(0,o.jsx)(t.li,{children:"Shows a badge and message when simulation is running."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example-control-buttons",children:"Example: Control Buttons"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'{\n  isSimulationRunning === "stopped" ? (\n    <Button onClick={startSimulation}>Start</Button>\n  ) : isSimulationRunning === "running" ? (\n    <Button onClick={stopSimulation}>Stop</Button>\n  ) : (\n    <Button onClick={() => navigate("/results")}>Show results</Button>\n  );\n}\n<Button onClick={resetSimulation}>Reset</Button>;\n'})}),"\n",(0,o.jsx)(t.h2,{id:"where-to-make-changes",children:"Where to Make Changes"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Button logic"}),": Add new actions or change state transitions."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Status feedback"}),": Update running status or messages."]}),"\n"]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsxs)(t.p,{children:["For further customization, see the code comments in ",(0,o.jsx)(t.code,{children:"src/components/sim-controls.tsx"})," and related context files."]})]})}function m(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);