"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[122],{7317:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Repositories/PRISM/Components/drone-processing-charts","title":"results-processingtimechart","description":"The results-processingtimechart component visualizes the total processing time per tick during the simulation. It uses recharts to render a live-updating line chart from tick log data.","source":"@site/docs/Repositories/PRISM/Components/drone-processing-charts.md","sourceDirName":"Repositories/PRISM/Components","slug":"/Repositories/PRISM/Components/drone-processing-charts","permalink":"/devdocs/docs/Repositories/PRISM/Components/drone-processing-charts","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/Components/drone-processing-charts.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"title":"results-processingtimechart","sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"results-drone-path","permalink":"/devdocs/docs/Repositories/PRISM/Components/results-drone-path"},"next":{"title":"results-pertickbreakdown","permalink":"/devdocs/docs/Repositories/PRISM/Components/results-pertickbreakdown"}}');var n=s(4848),r=s(8453);const o={title:"results-processingtimechart",sidebar_position:17},c="results-processingtimechart",l={},d=[{value:"Summary",id:"summary",level:2},{value:"Props",id:"props",level:2},{value:"Main Logic",id:"main-logic",level:2},{value:"Example: Converting Tick Log Data",id:"example-converting-tick-log-data",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"results-processingtimechart",children:"results-processingtimechart"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"results-processingtimechart"})," component visualizes the total processing time per tick during the simulation. It uses ",(0,n.jsx)(t.code,{children:"recharts"})," to render a live-updating line chart from tick log data."]}),"\n",(0,n.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Uses ",(0,n.jsx)(t.code,{children:"recharts"})," to display a line chart of total processing time over time."]}),"\n",(0,n.jsxs)(t.li,{children:["Pulls data from the shared drone context (",(0,n.jsx)(t.code,{children:"tickLogRef"}),")."]}),"\n",(0,n.jsx)(t.li,{children:"Supports both live-updating and static (snapshot) modes."}),"\n",(0,n.jsxs)(t.li,{children:["Provides clear X/Y axis labels and chart styling using ShadCN's ",(0,n.jsx)(t.code,{children:"Card"})," component."]}),"\n"]}),"\n",(0,n.jsx)("img",{src:"https://ik.imagekit.io/devdocs/img/prism/timeprocessing_chart_live.png",alt:"Time processing chart",width:"400"}),"\n",(0,n.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Prop"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"live"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{children:"Whether the chart should update live based on tick log changes."})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"main-logic",children:"Main Logic"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Accesses the ",(0,n.jsx)(t.code,{children:"tickLogRef"})," from the drone context."]}),"\n",(0,n.jsxs)(t.li,{children:["If ",(0,n.jsx)(t.code,{children:"live"})," is ",(0,n.jsx)(t.code,{children:"false"}),", it loads the current snapshot of the tick log."]}),"\n",(0,n.jsxs)(t.li,{children:["If ",(0,n.jsx)(t.code,{children:"live"})," is ",(0,n.jsx)(t.code,{children:"true"}),", it sets up a polling interval (every 500ms) to detect changes in the tick log."]}),"\n",(0,n.jsxs)(t.li,{children:["On each update, it transforms the tick data into a format suitable for ",(0,n.jsx)(t.code,{children:"recharts"}),", converting ticks from milliseconds to seconds."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example-converting-tick-log-data",children:"Example: Converting Tick Log Data"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"const totalProcessingData = useMemo(() => {\n  return tickLog.map(({ tick, totalProcessingTime }) => ({\n    tick: Math.round(tick / 1000), // convert ms to s\n    totalProcessingTime,\n  }));\n}, [tickLog]);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var i=s(6540);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);