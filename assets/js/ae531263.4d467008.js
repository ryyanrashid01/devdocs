"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[6973],{2503:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image","title":"plot_drone_paths_image Function","description":"This function plots the drone paths along with the monitoring zone on a geographic coordinate system and returns the plot as an image buffer.","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/plot_drone_paths_image.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":12},"sidebar":"tutorialSidebar","previous":{"title":"paths_to_numpy","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy"},"next":{"title":"use-mobile","permalink":"/devdocs/docs/Repositories/PRISM/Hooks/use-mobile"}}');var o=t(4848),i=t(8453);const s={sidebar_postion:12},l="plot_drone_paths_image Function",a={},d=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Workflow &amp; Key Steps",id:"workflow--key-steps",level:2},{value:"1. <strong>Setup Plot and Extract Zone Info</strong>",id:"1-setup-plot-and-extract-zone-info",level:3},{value:"2. <strong>Convert Radius from Meters to Degrees</strong>",id:"2-convert-radius-from-meters-to-degrees",level:3},{value:"3. <strong>Plot Monitoring Zone Circle</strong>",id:"3-plot-monitoring-zone-circle",level:3},{value:"4. <strong>Plot Zone Center</strong>",id:"4-plot-zone-center",level:3},{value:"5. <strong>Helper Function to Extract Coordinates</strong>",id:"5-helper-function-to-extract-coordinates",level:3},{value:"6. <strong>Plot Drone Paths</strong>",id:"6-plot-drone-paths",level:3},{value:"7. <strong>Configure Plot Limits, Labels, and Legend</strong>",id:"7-configure-plot-limits-labels-and-legend",level:3},{value:"8. <strong>Save Plot to Bytes Buffer</strong>",id:"8-save-plot-to-bytes-buffer",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"plot_drone_paths_image-function",children:[(0,o.jsx)(n.code,{children:"plot_drone_paths_image"})," Function"]})}),"\n",(0,o.jsx)(n.p,{children:"This function plots the drone paths along with the monitoring zone on a geographic coordinate system and returns the plot as an image buffer."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def plot_drone_paths_image(monitoring_zone, original_paths, drone_paths):\n"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"monitoring_zone"})}),(0,o.jsx)(n.td,{children:"Object"}),(0,o.jsxs)(n.td,{children:["An object with ",(0,o.jsx)(n.code,{children:"center"})," (latitude, longitude) and ",(0,o.jsx)(n.code,{children:"radius"})," in meters."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"original_paths"})}),(0,o.jsx)(n.td,{children:"List[List[PointDict]]"}),(0,o.jsx)(n.td,{children:"Original flight paths (lists of points with lat/lon)."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"drone_paths"})}),(0,o.jsx)(n.td,{children:"List[DronePath]"}),(0,o.jsx)(n.td,{children:"Paths flown by drones, including labels and points."})]})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"workflow--key-steps",children:"Workflow & Key Steps"}),"\n",(0,o.jsxs)(n.h3,{id:"1-setup-plot-and-extract-zone-info",children:["1. ",(0,o.jsx)(n.strong,{children:"Setup Plot and Extract Zone Info"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"fig, ax = plt.subplots(figsize=(8, 8))\ncenter_lat = monitoring_zone.center.latitude\ncenter_lon = monitoring_zone.center.longitude\nradius_m = monitoring_zone.radius\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Create an 8x8 inch matplotlib figure and axis."}),"\n",(0,o.jsx)(n.li,{children:"Extract center coordinates and radius of the monitoring zone."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"2-convert-radius-from-meters-to-degrees",children:["2. ",(0,o.jsx)(n.strong,{children:"Convert Radius from Meters to Degrees"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"radius_lat_deg = radius_m / 111_000  # Latitude degrees per meter\nradius_lon_deg = radius_m / (111_000 * math.cos(math.radians(center_lat)))  # Longitude degrees per meter (corrected for latitude)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Latitude degrees per meter is roughly constant (~111 km per degree)."}),"\n",(0,o.jsx)(n.li,{children:"Longitude degrees per meter vary with latitude (cosine factor applied)."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"3-plot-monitoring-zone-circle",children:["3. ",(0,o.jsx)(n.strong,{children:"Plot Monitoring Zone Circle"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"circle = Circle(\n    (center_lon, center_lat),\n    radius_lon_deg,\n    color='blue',\n    alpha=0.1,\n    label='Monitoring Zone',\n)\nax.add_patch(circle)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Draw a semi-transparent blue circle representing the monitoring zone."}),"\n",(0,o.jsx)(n.li,{children:"Circle is centered on the monitoring zone center, radius converted to degrees longitude."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"4-plot-zone-center",children:["4. ",(0,o.jsx)(n.strong,{children:"Plot Zone Center"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"ax.plot(\n    [center_lon],\n    [center_lat],\n    marker='o',\n    color='red',\n    markersize=5,\n    label='Zone Center'\n)\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Mark the zone center with a red dot."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"5-helper-function-to-extract-coordinates",children:["5. ",(0,o.jsx)(n.strong,{children:"Helper Function to Extract Coordinates"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def extract_coords(path):\n    return ([p.lon for p in path], [p.lat for p in path])\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Extracts longitude and latitude lists from a given path."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"6-plot-drone-paths",children:["6. ",(0,o.jsx)(n.strong,{children:"Plot Drone Paths"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for idx, drone in enumerate(drone_paths):\n    drone_path = drone.path\n    original_path = original_paths[idx] if idx < len(original_paths) else []\n\n    paths_differ = len(original_path) != len(drone_path) or any(\n        abs(p1.lat - p2.lat) > 1e-7 or abs(p1.lon - p2.lon) > 1e-7\n        for p1, p2 in zip(original_path, drone_path)\n    )\n\n    if paths_differ and original_path:\n        ox, oy = extract_coords(original_path)\n        ax.plot(\n            ox,\n            oy,\n            linestyle=\'dotted\',\n            color=f"C{idx}",\n            label=f"{drone.label} Original Path",\n            alpha=0.7,\n        )\n\n    if drone_path:\n        rx, ry = extract_coords(drone_path)\n        ax.plot(\n            rx,\n            ry,\n            linestyle=\'solid\',\n            color=f"C{idx}",\n            label=f"{drone.label} Drone Path" if paths_differ else f"{drone.label} Path",\n            alpha=0.9,\n        )\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"For each drone, checks if the drone path differs significantly from the original."}),"\n",(0,o.jsx)(n.li,{children:"If so, plots original path as a dotted line and drone path as a solid line."}),"\n",(0,o.jsx)(n.li,{children:"If not, only the drone path is plotted."}),"\n",(0,o.jsxs)(n.li,{children:["Each drone uses a different matplotlib color cycle (",(0,o.jsx)(n.code,{children:"C{idx}"}),")."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"7-configure-plot-limits-labels-and-legend",children:["7. ",(0,o.jsx)(n.strong,{children:"Configure Plot Limits, Labels, and Legend"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"ax.set_xlim(center_lon - 1.5 * radius_lon_deg, center_lon + 1.5 * radius_lon_deg)\nax.set_ylim(center_lat - 1.5 * radius_lat_deg, center_lat + 1.5 * radius_lat_deg)\n\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nax.set_title('Drone Paths and Monitoring Zone')\nax.set_aspect('equal', adjustable='box')\nax.legend()\nplt.tight_layout()\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sets x/y limits to comfortably include the monitoring zone plus some margin."}),"\n",(0,o.jsx)(n.li,{children:"Adds axis labels, title, legend, and equal aspect ratio."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"8-save-plot-to-bytes-buffer",children:["8. ",(0,o.jsx)(n.strong,{children:"Save Plot to Bytes Buffer"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"buf = io.BytesIO()\nplt.savefig(buf, format='png')\nplt.close(fig)\nbuf.seek(0)\nreturn buf\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Saves the figure to an in-memory bytes buffer as PNG."}),"\n",(0,o.jsx)(n.li,{children:"Closes the plot to free memory."}),"\n",(0,o.jsx)(n.li,{children:"Returns the buffer for use (e.g., to send as an HTTP response)."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"This function creates a geographic plot of drone flight paths relative to a monitoring zone, including both original planned paths and actual flown paths, and outputs the plot image in memory."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);