"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[1804],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},l=s.createContext(r);function o(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(l.Provider,{value:n},e.children)}},8533:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters","title":"latlon_to_xy_meters","description":"This function converts geographic coordinates (latitude and longitude) into local Cartesian coordinates (x, y) in meters relative to a central reference point.","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/lat_lon_to_xy_meters.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":2},"sidebar":"tutorialSidebar","previous":{"title":"generate_single_path_wrapper","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/generate_single_path_wrapper"},"next":{"title":"paths_to_numpy","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/paths_to_numpy"}}');var r=t(4848),l=t(8453);const o={sidebar_postion:2},i="latlon_to_xy_meters",a={},c=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Purpose",id:"purpose",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Step 1: Define Conversion Constants",id:"step-1-define-conversion-constants",level:3},{value:"Step 2: Calculate Local X and Y Distances (meters)",id:"step-2-calculate-local-x-and-y-distances-meters",level:3},{value:"Returns",id:"returns",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"latlon_to_xy_meters",children:(0,r.jsx)(n.code,{children:"latlon_to_xy_meters"})})}),"\n",(0,r.jsxs)(n.p,{children:["This function converts geographic coordinates (latitude and longitude) into ",(0,r.jsx)(n.strong,{children:"local Cartesian coordinates"})," (x, y) in meters relative to a central reference point."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def latlon_to_xy_meters(center_lat, center_lon, lat, lon):\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"center_lat"})}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"Latitude of the reference center point (degrees)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"center_lon"})}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"Longitude of the reference center point (degrees)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lat"})}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"Latitude of the point to convert (degrees)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lon"})}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"Longitude of the point to convert (degrees)."})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Converts the difference between a point (",(0,r.jsx)(n.code,{children:"lat"}),", ",(0,r.jsx)(n.code,{children:"lon"}),") and a center reference (",(0,r.jsx)(n.code,{children:"center_lat"}),", ",(0,r.jsx)(n.code,{children:"center_lon"}),") from degrees into approximate distances ",(0,r.jsx)(n.strong,{children:"in meters"})," along the east-west (x) and north-south (y) axes."]}),"\n",(0,r.jsx)(n.li,{children:"Useful for planar calculations when working with geographic data on a small scale, where Earth curvature can be approximated."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-define-conversion-constants",children:"Step 1: Define Conversion Constants"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"meter_per_deg_lat = 111320\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Approximately ",(0,r.jsx)(n.strong,{children:"111,320 meters per degree of latitude"}),", nearly constant globally because degrees of latitude correspond roughly to fixed distances north-south."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"meter_per_deg_lon = 40075000 * np.cos(np.radians(center_lat)) / 360\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Calculates meters per degree of longitude at the given latitude:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Earth's circumference \u2248 40,075,000 meters."}),"\n",(0,r.jsx)(n.li,{children:"At the equator, 1\xb0 longitude \u2248 111,320 meters (same as latitude)."}),"\n",(0,r.jsx)(n.li,{children:"Multiplied by cosine of latitude to adjust for shrinking longitude distance as you move away from the equator."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"step-2-calculate-local-x-and-y-distances-meters",children:"Step 2: Calculate Local X and Y Distances (meters)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"x = (lon - center_lon) * meter_per_deg_lon\ny = (lat - center_lat) * meter_per_deg_lat\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"x"}),": East-west distance from center (meters)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"y"}),": North-south distance from center (meters)."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A tuple ",(0,r.jsx)(n.code,{children:"(x, y)"})," representing the approximate planar coordinates in meters relative to the reference point."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'center_lat, center_lon = 25.276987, 55.296249  # Reference point (Dubai)\nlat, lon = 25.285, 55.3                        # Nearby point\n\nx, y = latlon_to_xy_meters(center_lat, center_lon, lat, lon)\nprint(f"x: {x:.1f} meters, y: {y:.1f} meters")\n# Example output: x: 414.0 meters, y: 901.0 meters\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This method assumes a ",(0,r.jsx)(n.strong,{children:"local flat-earth approximation"}),", valid for small distances (a few kilometers)."]}),"\n",(0,r.jsx)(n.li,{children:"For longer distances or high precision, consider using geodesic calculations."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);