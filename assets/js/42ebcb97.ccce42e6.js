"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[871],{3348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/calculate_direction","title":"calculate_direction","description":"This function calculates the direction vector from one point (p1) to another (p2) on the Earth\u2019s surface, returning a normalized 2D vector in Cartesian coordinates (x, y).","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/calculate_direction.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/calculate_direction","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/calculate_direction","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/calculate_direction.md","tags":[],"version":"current","frontMatter":{"sidebar_postion":3},"sidebar":"tutorialSidebar","previous":{"title":"build_corridor_polygon","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/build_corridor_polygon"},"next":{"title":"calculate_initial_bearing","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/calculate_initial_bearing"}}');var r=t(4848),o=t(8453);const s={sidebar_postion:3},c="calculate_direction",a={},l=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Step 1: Calculate Initial Bearing",id:"step-1-calculate-initial-bearing",level:3},{value:"Step 2: Convert Bearing to Radians",id:"step-2-convert-bearing-to-radians",level:3},{value:"Step 3: Calculate Direction Vector Components",id:"step-3-calculate-direction-vector-components",level:3},{value:"Summary",id:"summary",level:2},{value:"Example Usage",id:"example-usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"calculate_direction",children:(0,r.jsx)(n.code,{children:"calculate_direction"})})}),"\n",(0,r.jsxs)(n.p,{children:["This function calculates the ",(0,r.jsx)(n.strong,{children:"direction vector"})," from one point (",(0,r.jsx)(n.code,{children:"p1"}),") to another (",(0,r.jsx)(n.code,{children:"p2"}),") on the Earth\u2019s surface, returning a normalized 2D vector in Cartesian coordinates (x, y)."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def calculate_direction(p1: Point, p2: Point):\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"p1"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Point"})}),(0,r.jsxs)(n.td,{children:["Starting geographic point (with ",(0,r.jsx)(n.code,{children:".latitude"})," and ",(0,r.jsx)(n.code,{children:".longitude"}),")."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"p2"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Point"})}),(0,r.jsx)(n.td,{children:"Target geographic point."})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-calculate-initial-bearing",children:"Step 1: Calculate Initial Bearing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"bearing = calculate_initial_bearing(p1, p2)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Calls a helper function ",(0,r.jsx)(n.code,{children:"calculate_initial_bearing"})," which computes the ",(0,r.jsx)(n.strong,{children:"initial compass bearing"})," from ",(0,r.jsx)(n.code,{children:"p1"})," to ",(0,r.jsx)(n.code,{children:"p2"})," in degrees."]}),"\n",(0,r.jsx)(n.li,{children:"Bearing is the clockwise angle from north (0\xb0) to the line connecting the two points (range: 0\xb0 to 360\xb0)."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"step-2-convert-bearing-to-radians",children:"Step 2: Convert Bearing to Radians"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"bearing_rad = np.radians(bearing)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Converts the bearing from degrees to radians for use in trigonometric functions."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"step-3-calculate-direction-vector-components",children:"Step 3: Calculate Direction Vector Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"return np.array([np.cos(bearing_rad), np.sin(bearing_rad)])\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Computes the x-component as the cosine of the bearing angle."}),"\n",(0,r.jsx)(n.li,{children:"Computes the y-component as the sine of the bearing angle."}),"\n",(0,r.jsxs)(n.li,{children:["Returns these as a NumPy array representing a ",(0,r.jsx)(n.strong,{children:"unit vector"})," pointing in the direction from ",(0,r.jsx)(n.code,{children:"p1"})," to ",(0,r.jsx)(n.code,{children:"p2"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The function converts geographic bearing into a 2D Cartesian direction vector on a plane."}),"\n",(0,r.jsx)(n.li,{children:"Useful for vector math such as moving in the direction from one coordinate to another."}),"\n",(0,r.jsx)(n.li,{children:"The returned vector has length 1 (unit vector), simplifying scaling operations for movement or velocity."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from geopy import Point\n\nstart = Point(25.276987, 55.296249)   # Dubai\nend = Point(25.285, 55.3)              # Nearby target\n\ndirection_vector = calculate_direction(start, end)\nprint(direction_vector)\n# Example output: [0.7071, 0.7071] meaning 45\xb0 northeast direction\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);