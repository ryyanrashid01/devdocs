"use strict";(self.webpackChunkdeploy_to_vm=self.webpackChunkdeploy_to_vm||[]).push([[1084],{38:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon","title":"sample_point_within_polygon","description":"samplepointwithin_polygon","source":"@site/docs/Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon.md","sourceDirName":"Repositories/PRISM/FastAPI/Helper Functions","slug":"/Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon","draft":false,"unlisted":false,"editUrl":"https://github.com/ryyanrashid01/devdocs/edit/main/docs/Repositories/PRISM/FastAPI/Helper Functions/sample_point_within_polygon.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"SmoothSpeed","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/smooth_speed"},"next":{"title":"build_corridor_polygon","permalink":"/devdocs/docs/Repositories/PRISM/FastAPI/Helper Functions/build_corridor_polygon"}}');var o=i(4848),s=i(8453);const r={sidebar_position:5},d=void 0,l={},a=[{value:"<code>sample_point_within_polygon</code>",id:"sample_point_within_polygon",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"<code>sample_point_outside_polygon</code>",id:"sample_point_outside_polygon",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"Function Signature",id:"function-signature-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"How It Works",id:"how-it-works-1",level:3},{value:"Common Notes",id:"common-notes",level:2},{value:"Example Usage",id:"example-usage",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"sample_point_within_polygon",children:(0,o.jsx)(n.code,{children:"sample_point_within_polygon"})}),"\n",(0,o.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,o.jsx)(n.p,{children:"Randomly generates a geographic point within a polygon around a specified center point."}),"\n",(0,o.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def sample_point_within_polygon(polygon, center, radius_m):\n"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"polygon"})}),(0,o.jsx)(n.td,{children:"Shapely Polygon"}),(0,o.jsx)(n.td,{children:"The polygon inside which a point must lie."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"center"})}),(0,o.jsx)(n.td,{children:"Geopy Point"}),(0,o.jsx)(n.td,{children:"Central point for distance calculations."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"radius_m"})}),(0,o.jsx)(n.td,{children:"float"}),(0,o.jsxs)(n.td,{children:["Maximum radius in meters for sampling points around ",(0,o.jsx)(n.code,{children:"center"}),"."]})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Tries up to 1000 times to find a random point inside the polygon."}),"\n",(0,o.jsx)(n.li,{children:"Generates a random angle from 0 to 360 degrees."}),"\n",(0,o.jsxs)(n.li,{children:["Picks a random distance ",(0,o.jsx)(n.code,{children:"r"})," between 5 meters and ",(0,o.jsx)(n.code,{children:"radius_m"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Calculates a candidate point at that distance and angle from the center using geodesic calculations (",(0,o.jsx)(n.code,{children:"distance(meters=r).destination(center, angle)"}),")."]}),"\n",(0,o.jsx)(n.li,{children:"Converts the candidate to a Shapely point (longitude, latitude order)."}),"\n",(0,o.jsxs)(n.li,{children:["Checks if the candidate lies ",(0,o.jsx)(n.strong,{children:"inside"})," the polygon (",(0,o.jsx)(n.code,{children:"polygon.contains(point)"}),")."]}),"\n",(0,o.jsx)(n.li,{children:"Returns the candidate point immediately if valid."}),"\n",(0,o.jsx)(n.li,{children:"Raises an error if no valid point is found within 1000 attempts."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"sample_point_outside_polygon",children:(0,o.jsx)(n.code,{children:"sample_point_outside_polygon"})}),"\n",(0,o.jsx)(n.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,o.jsxs)(n.p,{children:["Randomly generates a geographic point ",(0,o.jsx)(n.strong,{children:"outside"})," a given polygon but within a radius around the center."]}),"\n",(0,o.jsx)(n.h3,{id:"function-signature-1",children:"Function Signature"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def sample_point_outside_polygon(polygon, center, radius_m, min_dist_m=15):\n"})}),"\n",(0,o.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"polygon"})}),(0,o.jsx)(n.td,{children:"Shapely Polygon"}),(0,o.jsx)(n.td,{children:"The polygon outside which a point must lie."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"center"})}),(0,o.jsx)(n.td,{children:"Geopy Point"}),(0,o.jsx)(n.td,{children:"Central point for distance calculations."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"radius_m"})}),(0,o.jsx)(n.td,{children:"float"}),(0,o.jsxs)(n.td,{children:["Maximum radius in meters for sampling points around ",(0,o.jsx)(n.code,{children:"center"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"min_dist_m"})}),(0,o.jsx)(n.td,{children:"float (default=15)"}),(0,o.jsx)(n.td,{children:"Minimum distance in meters from center for candidate points."})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"how-it-works-1",children:"How It Works"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Attempts up to 1000 times to sample a point ",(0,o.jsx)(n.strong,{children:"outside"})," the polygon."]}),"\n",(0,o.jsx)(n.li,{children:"Generates a random angle between 0 and 360 degrees."}),"\n",(0,o.jsxs)(n.li,{children:["Picks a random distance ",(0,o.jsx)(n.code,{children:"r"})," between ",(0,o.jsx)(n.code,{children:"min_dist_m"})," and ",(0,o.jsx)(n.code,{children:"radius_m"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Computes the candidate point using geodesic calculations."}),"\n",(0,o.jsx)(n.li,{children:"Converts to a Shapely point."}),"\n",(0,o.jsxs)(n.li,{children:["Returns the candidate if it lies ",(0,o.jsx)(n.strong,{children:"outside"})," the polygon (",(0,o.jsx)(n.code,{children:"not polygon.contains(point)"}),")."]}),"\n",(0,o.jsx)(n.li,{children:"Raises an error if no suitable point is found after 1000 tries."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"common-notes",children:"Common Notes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Both functions use ",(0,o.jsx)(n.strong,{children:"rejection sampling"}),": randomly sample and test until a valid point is found."]}),"\n",(0,o.jsx)(n.li,{children:"The max number of attempts (1000) prevents infinite loops in pathological cases."}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"distance"})," function from ",(0,o.jsx)(n.code,{children:"geopy"})," accurately accounts for Earth's curvature in calculating destination points."]}),"\n",(0,o.jsxs)(n.li,{children:["Shapely expects points as ",(0,o.jsx)(n.code,{children:"(longitude, latitude)"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from shapely.geometry import Polygon\nfrom geopy import Point\n\n# Suppose you have a polygon and a center:\npoly = your_corridor_polygon  # Shapely Polygon\ncenter = Point(25.276987, 55.296249)\nradius = 300  # meters\n\n# Sample a point inside the polygon\ninside_point = sample_point_within_polygon(poly, center, radius)\nprint("Inside point:", inside_point.latitude, inside_point.longitude)\n\n# Sample a point outside the polygon but within radius\noutside_point = sample_point_outside_polygon(poly, center, radius, min_dist_m=20)\nprint("Outside point:", outside_point.latitude, outside_point.longitude)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);